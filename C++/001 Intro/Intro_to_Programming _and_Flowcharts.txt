C++ (pronounced "see plus plus") is a  general-purpose, multi-paradigm, statically typed ,  free-form programming language, supporting procedural; 
object-oriented; generic; and (more recently) functional programming paradigms, and is well-known for facilitating low-cost abstractions in code. 
If any of the preceding concepts are unfamiliar to you, do not worry, they will be introduced in subsequent sections.
During the 1990s C++ grew to become one of the most popular computer programming languages, and it is still the third most popular language, 
according to the Tiobe rankings as of November 2017. C++ was first designed with a focus on systems programming, but its features also make it 
an attractive language for creating end-user applications, especially those with resource constraints, or that require very high performance. 
C++ is extensively used in game development, web clients/server side, back office of financial applications and robotics.

History and standardization
Bjarne Stroustrup, a Computer Scientist from Bell Labs, was the designer and original implementer of C++ (originally named "C with Classes") 
during the 1980s, as an enhancement to the C programming language. C, which had also been created at Bell Labs for the purpose of implementing 
the Unix operating system by Dennis Ritchie, gave users great control over hardware at a higher conceptual level than assembly language (ASM), 
but still with limited expressivity. Stroustrup decided to combine features for program organization from the object-oriented Simula language 
with C's efficient use of hardware resources. Enhancements started with the addition of object-oriented concepts like classes and virtual functions, 
followed by, among many features, namespaces, operator overloading, templates, and exception handling. These and other features are covered in 
detail in this book. Several features of C++ were later adopted by C, including the const keyword for creating immutable values in a program, 
inline functions, declarations in for loops , and C++-style comments (using the // symbol).

How to solve a programming problem?
1. Understand the problem. 
2. Draw a flowchart. (Check the given values)
3. Write pseudocode. (Figure out an approach)
4. Write code. 
5. Test code.

Given some problem P, say you 'think' of some solution, ki aise aise krenge, etc. Now write down this crude solution on paper, 
not necessarily in correct syntax (code ki bhasha). Now your idea is on paper. Convert this rough work, also called 'pseudocode'
into a program in a programming lang. usage of your choice, say C++.

Pseudocode: A very simple and high-level (upar-upar ka) form of computer langage that is used in program design.

A Flowchart is diagramatic representation of an approach. This draws out all the steps of your approach in order.

Components of a flowchart:
    1. Terminator: Specifies the start and end of the flowchart.
    2. Parallelogram:For taking input or showing output.
    3. Process: Operations and processes ke liye.
    4. Decision: Decision making.
    5. Circle: Connectors.
    6. Arrow: Connects the components.


Pseudocode for adding 2 numbers:

    input 2 numbers a and b
    let sum = a + b
    print out sum
    
    or

    read a and b
    sum variable is a+b
    sum chaapo

Both pseudocodes are ok. No pseudocode is wrong as long as the logic is same/similar.

What is a Programming Language?

    Jaise khana khane ke liye mummy/papa ko bolna padhta hai, vaise hi we must instruct our computer to perform some task for us.

    More formally, a programming language is a way to communicate with a computer.
    It is a formal language which consist of set of strings that produce various kinds of machine output.

    E.g. C++, Java, Python, C#, etc.

    C++ program to display "Hello World"
 
    //Header file for input output functions
    #include <iostream>
    using namespace std;
 
    //Main() function: where the execution of program begins
    int main()
    {
        //prints hello world
        cout << "Hello World";
        return 0;
    }
    
    Every language must be written following some rules called syntax of that language.

    A computer essentially only understands binary codes of 0s and 1s.
    A compiler processes the statements of a programming language into Machine Code (Binary).

    Source Code --> Compiler --> Machine Code --> Executable Code (.exe)
    
    Read more about Compilers here: https://www.geeksforgeeks.org/introduction-to-compilers/




